"""
Django settings for checkBackEnd project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 存储上传图片的路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s9&j$%@#(pjhlgjvay2w+vw%9ft#&)865x+7ebjq#q4&w_35a$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*", "192.168.0.105"]
# 跨域
CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'image_upload',
    "management_api",
    "quickManage"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'checkBackEnd.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            "libraries": {  # 自定义过滤器
                'pagination': 'templatetags.pagination'  # 添加这边三行配置
            }  # 添加这边三行配置
        },
    },
]

WSGI_APPLICATION = 'checkBackEnd.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'statics/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'statics'),  # 将 React 构建的静态文件加入
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING
LOGGING = {
    'version': 1,  # 日志配置的版本号，1表示标准配置
    'disable_existing_loggers': False,  # 是否禁用现有的日志记录器。设置为 False，表示不会禁用已存在的日志记录器
    'handlers': {  # 日志处理器（handlers）定义了如何处理日志
        'console': {  # 定义一个名为 'console' 的处理器
            'level': 'INFO',  # 该处理器的日志级别为 WARNING
            'class': 'logging.StreamHandler',  # 使用 StreamHandler 来将日志输出到控制台（标准输出）
        },
    },
    'loggers': {  # 日志记录器（loggers）定义了日志记录的行为
        'django': {  # 只针对 Django 的日志记录器进行配置
            'handlers': ['console'],  # 关联 'console' 处理器，表示日志将输出到控制台
            'level': 'INFO',  # 设置记录器的日志级别为 WARNING，只记录 WARNING、ERROR 和 CRITICAL 级别的日志
            'propagate': True,  # 允许日志传播，意味着该日志记录器的日志将继续传播到父记录器（通常是根记录器）
        },
    },
}

# iframe权限，有3个值：
# DENY	不允许任何页面通过 iframe 加载（默认值）
# SAMEORIGIN	允许同域页面通过 iframe 加载
# ALLOWALL	所有页面都允许被 iframe 加载（不安全）
X_FRAME_OPTIONS = 'SAMEORIGIN'
